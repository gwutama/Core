<?php
namespace Core\Service;

if(!class_exists("\\Core\\Service\\MockClass") && !class_exists("\\Core\\Service\\MockClass2")
    && !class_exists("\\Core\\Service\\MockClass3")) {
    class MockClass {
        public $param1;
        public $param2;
        public $param3;
    }

    class MockClass2 extends MockClass {
        public function __construct($param1, $param2, $param3) {
            $this->param1 = $param1;
            $this->param2 = $param2;
            $this->param3 = $param3;
        }
    }

    class MockClass3 extends MockClass2 {}
}

require_once 'vendors/Core/Service/ServiceContainer.php';

/**
 * Test class for ServiceContainer.
 * Generated by PHPUnit on 2012-02-17 at 05:51:32.
 */
class ServiceContainerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var ServiceContainer
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new ServiceContainer;
        $this->object->register("\\Core\\Service\\MockClass", array(), array(), "MockClass");
        $this->object->register("\\Core\\Service\\MockClass2", array(
            "param1" => "value1",
            "param2" => "value2",
            "param3" => "value3"
        ), array(), "MockClass2");
        $this->object->register("\\Core\\Service\\MockClass3", array(
            "param1" => "foo",
            "param2" => "bar",
            "param3" => array(1,2,3)
        ), array());
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testHasService()
    {
        $this->assertTrue($this->object->hasService("MockClass"));
        $this->assertTrue($this->object->hasService("MockClass2"));
        $this->assertTrue($this->object->hasService("\\Core\\Service\\MockClass3"));
        $this->assertFalse($this->object->hasService("MockClass4"));
        $this->assertFalse($this->object->hasService("Inexists"));
    }

    public function testGetService()
    {
        $this->assertTrue($this->object->getService("MockClass") instanceof MockClass);
        $this->assertTrue($this->object->getService("MockClass2") instanceof MockClass2);
        $this->assertTrue($this->object->getService("\\Core\\Service\\MockClass3") instanceof MockClass3);
    }

    /**
     * @expectedException \Core\ServiceNotAvailableException
     */
    public function testGetService2()
    {
        $this->object->getService("Inexists");
    }


    public function testRegister()
    {
        $this->object->clear();
        $this->assertEquals(0, $this->object->count());

        $this->object->register("\\Core\\Service\\MockClass", array(), array(), "MockClass");
        $this->object->register("\\Core\\Service\\MockClass2", array(
            "param1" => "value1",
            "param2" => "value2",
            "param3" => "value3"
        ), array(), "MockClass2");
        $this->object->register("\\Core\\Service\\MockClass3", array(
            "param1" => "foo",
            "param2" => "bar",
            "param3" => array(1,2,3)
        ), array(), "MockClass3");
        $this->assertEquals(3, $this->object->count());

        // service name must not be null
        $this->object->register(null);
        $this->assertEquals(3, $this->object->count());

        $this->object->register("\\Core\\Service\\MockClass4", array(), array(), "MockClass4");
        $this->assertEquals(4, $this->object->count());

        // same registered service
        $this->object->register("\\Core\\Service\\MockClass", array(), array(), "MockClass");
        $this->assertEquals(4, $this->object->count());
    }


    public function test__get()
    {
        $this->assertTrue($this->object->MockClass instanceof MockClass);
        $this->assertTrue($this->object->MockClass2 instanceof MockClass2);
    }


    public function test__call()
    {
        $this->assertTrue($this->object->getMockClassService() instanceof MockClass);
        $this->assertTrue($this->object->getMockClass2Service() instanceof MockClass2);
    }


    public function testIterator()
    {
        foreach($this->object as $service) {
            $this->assertNotNull($service->getName());
        }
    }
}
?>
