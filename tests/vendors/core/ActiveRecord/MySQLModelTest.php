<?php

namespace Models;
use Core\ActiveRecord\Operator\MySQL as Op;

require_once 'C:\Users\Galuh Utama\workspace\Core\vendors\Core\ActiveRecord\Model.php';
require_once 'C:\Users\Galuh Utama\workspace\Core\vendors\Core\ActiveRecord\ModelCollection.php';
require_once 'C:\Users\Galuh Utama\workspace\Core\vendors\Core\ActiveRecord\Operator\MySQL.php';

class Mock extends \Core\ActiveRecord\Model {}

///////////////////////////////////////////////////////////


namespace Core\ActiveRecord;
use Core\ActiveRecord\Adapter\MySQL;
use Models\Mock;


/**
 * Test class for Model.
 * Generated by PHPUnit on 2012-02-19 at 00:41:17.
 */
class MySQLModelTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Model
     */
    protected $object;

    /**
     * @var Adapter
     */
    protected $adapter;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->adapter = new MySQL("mysql:host=localhost;dbname=test", "root", "gwutama");
        $this->object = new Mock($this->adapter);
        $this->object->execute(
            "CREATE TABLE mocks(
                id INT PRIMARY KEY AUTO_INCREMENT,
                field1 VARCHAR(255),
                field2 VARCHAR(255),
                field3 INT
            )"
        );

        // Insert dummy records
        // ID 1
        $mock = new Mock($this->adapter);
        $mock->field1 = "value1-1";
        $mock->field2 = "value2-1";
        $mock->field3 = 1;
        $mock->save();

        // ID 2
        $mock = new Mock($this->adapter);
        $mock->field1 = "value1-2";
        $mock->field2 = "value2-2";
        $mock->field3 = 1;
        $mock->save();

        // ID 3
        $mock = new Mock($this->adapter);
        $mock->field1 = "value1-3";
        $mock->field2 = "value2-3";
        $mock->field3 = 1;
        $mock->save();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->object->execute("DROP TABLE mocks");
        $this->adapter->disconnect();
    }

    /**
     * @todo Implement testFindById().
     */
    public function testFindById()
    {
        $obj = $this->object->findById(1);
        $this->assertEquals("value1-1", $obj->field1);
        $this->assertEquals("value2-1", $obj->field2);
        $this->assertEquals(1, $obj->field3);

        $obj = $this->object->findById(2);
        $this->assertEquals("value1-2", $obj->field1);
        $this->assertEquals("value2-2", $obj->field2);
        $this->assertEquals(1, $obj->field3);

        $obj = $this->object->findById(3);
        $this->assertEquals("value1-3", $obj->field1);
        $this->assertEquals("value2-3", $obj->field2);
        $this->assertEquals(1, $obj->field3);
    }

    public function testFindAll()
    {
        $objs = $this->object->findAll();
        $this->assertEquals(3, $objs->count());

        $this->assertEquals("value1-1", $objs->get(0)->field1);
        $this->assertEquals("value2-1", $objs->get(0)->field2);
        $this->assertEquals(1, $objs->get(0)->field3);

        $obj = $this->object->findById(2);
        $this->assertEquals("value1-2", $objs->get(1)->field1);
        $this->assertEquals("value2-2", $objs->get(1)->field2);
        $this->assertEquals(1, $objs->get(1)->field3);

        $obj = $this->object->findById(3);
        $this->assertEquals("value1-3", $objs->get(2)->field1);
        $this->assertEquals("value2-3", $objs->get(2)->field2);
        $this->assertEquals(1, $objs->get(2)->field3);
    }

    public function testFindFirst()
    {
        $obj = $this->object->findFirst();
        $this->assertEquals("value1-1", $obj->field1);
        $this->assertEquals("value2-1", $obj->field2);
        $this->assertEquals(1, $obj->field3);
    }

    public function testFindLast()
    {
        $obj = $this->object->findLast();
        $this->assertEquals("value1-3", $obj->field1);
        $this->assertEquals("value2-3", $obj->field2);
        $this->assertEquals(1, $obj->field3);
    }

    public function testFindOne()
    {
        $obj = $this->object->findOne();
        $this->assertEquals("value1-1", $obj->field1);
        $this->assertEquals("value2-1", $obj->field2);
        $this->assertEquals(1, $obj->field3);
    }

    public function testSaveCreate()
    {
        // Insert dummy records
        for($i = 0; $i < 10; $i++) {
            $mock = new Mock($this->adapter);
            $mock->save();
        }

        $objects = $this->object->findAll();
        $this->assertEquals(13, $objects->count()); // 10 + 3 from before
    }

    public function testSaveUpdate()
    {
    }

    public function testDelete()
    {
        $objects = $this->object->findAll();
        $this->assertEquals(3, $objects->count());
        foreach($objects as $object) {
            $object->delete();
        }
        $objects = $this->object->findAll();
        $this->assertEquals(0, $objects->count());
    }

    public function testDeleteAll()
    {
        $objects = $this->object->findAll();
        $this->assertEquals(3, $objects->count());

        $objects->delete();

        $objects = $this->object->findAll();
        $this->assertEquals(0, $objects->count());
    }

}
?>
